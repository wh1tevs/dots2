#!/bin/bash

BACK_TO_EXIT=false

get_lines_count() {
  wc -l < <(echo -e "$*")
}

menu() {
  local prompt="$1"
  local options="$2"
  local extra="$3"
  local preselect="$4"

  read -r -a args <<<"$extra"

  if [[ -n "$preselect" ]]; then
    local index
    index=$(echo -e "$options" | grep -nxF "$preselect" | cut -d: -f1)
    if [[ -n "$index" ]]; then
      args+=("-a" "$index")
    fi
  fi

  echo -e "$options" | wofi -d -i -D close_on_focus_lost=true -L"$(get_lines_count "$options")" -p "$promptâ€¦" "${args[@]}"
}

terminal() {
  kitty "$@"
}

present_terminal() {
  launch-floating-terminal $1
}

show_setup_menu() {
  case $(menu "Setup" "Audio" -L) in
  *Audio*) $TERMINAL --class=Wiremix wiremix ;;
  *) back_to ;;
  esac
}

show_system_menu() {
  case $(menu "System" "Lock\nLogout\nRestart\nShutdown") in
  *Lock*) cmd-lock-screen ;;
  *Logout*) uwsm stop -r default ;;
  *Restart*) systemctl reboot ;;
  *Shutdown*) systemctl poweroff ;;
  esac
}

show_menu() {
  case ${1,,} in
  *launch*) wofi --show drun -i -p "Launch" ;;
  *setup*) show_setup_menu ;;
  *system*) show_system_menu ;;
  esac
}

show_main_menu() {
  show_menu "$(menu "Go" "Launch\nSetup\nSystem")"
}

back_to() {
  local parent_menu="$1"

  if [[ "$BACK_TO_EXIT" == "true" ]]; then
    exit 0
  elif [[ -n "$parent_menu" ]]; then
    "$parent_menu"
  else
    show_main_menu
  fi
}

if [[ -n "$1" ]]; then
  BACK_TO_EXIT=true
  show_menu "$1"
else
  show_main_menu
fi

# vim: ft=bash
